page.title=L Developer Preview APIs
excludeFromSuggestions=true
sdk.platform.apiLevel=20
@jd:body


<div id="qv-wrapper">
<div id="qv">

<h2>In this document
    <a href="#" onclick="hideNestedItems('#toc44',this);return false;" class="header-toggle">
        <span class="more">show more</span>
        <span class="less" style="display:none">show less</span></a></h2>

<ol id="toc44" class="hide-nested">
  <li><a href="#Behaviors">Important Behavior Changes</a>
    <ol>
      <li><a href="#BehaviorNotifications">If your app implements notifications...</a></li>
      <li><a href="#BehaviorFullscreen">If your app uses fullScreenIntent...</a></li>
      <li><a href="#BehaviorGetRecentTasks">If your app uses ActivityManager.getRecentTasks()...</a></li>
    </ol>
  </li>
  <li><a href="#UI">User Interface</a>
    <ol>
      <li><a href="#MaterialDesign">Material design support</a></li>
      <li><a href="#LockscreenNotifications">Lockscreen notifications</a></li>
      <li><a href="#NotificationsMetadata">Notifications metadata</a></li>
      <li><a href="#Recents">Concurrent documents and activities in Recents screen</a></li>
      <li><a href="#WebView">WebView updates</a></li>
    </ol>
  </li>
  <li><a href="#UserInput">User Input</a>
    <ol>
      <li><a href="#IME">IME bug fixes and improvements</a></li>
    </ol>
  </li>
  <li><a href="#Animations">Animation &amp; Graphics</a>
    <ol>
      <li><a href="#OpenGLES-3-1">Support for OpenGL ES 3.1</a></li>
    </ol>
  </li>
  <li><a href="#Multimedia">Multimedia</a>
    <ol>
      <li><a href="#Camera-v2">Camera V2</a></li>
      <li><a href="#AudioPlayback">Audio playback</a></li>
      <li><a href="#MediaPlaybackControl">Media playback control</a></li>
    </ol>
  </li>
  <li><a href="#Storage">Storage</a>
    <ol>
      <li><a href="#DirectorySelection">Directory selection</a></li>
    </ol>
  </li>
  <li><a href="#Wireless">Wireless and Connectivity</a>
    <ol>
      <li><a href="#Multinetwork">Dynamic network selection and seamless handoff</a></li>
      <li><a href="#BluetoothBroadcasting">Bluetooth broadcasting</a></li>
      <li><a href="#NFCEnhancements">NFC enhancements for payments</a></li>
    </ol>
  </li>
  <li><a href="#Power">Power Efficiency</a>
    <ol>
      <li><a href="#JobScheduler">Scheduling Jobs</a></li>
      <li><a href="#PowerMeasurementTools">Developer tools and APIs for power measurement</a>
    </ol>
  </li>
  <li><a href="#Enterprise">Enterprise</a>
    <ol>
      <li><a href="#ManagedProvisioning">Managed provisioning</a></li>
    </ol>
  </li>
  <li><a href="#Printing">Printing Framework</a>
    <ol>
      <li><a href="#PDFRender">PDF rendering</a></li>
    </ol>
  </li>
  <li><a href="#TestingA11y">Testing &amp; Accessibility</a>
    <ol>
      <li><a href="#TestingA11yImprovements">Testing and accessibility improvements</a></li>
    </ol>
  </li>
  <li><a href="#Manifest">Manifest Declarations</a>
    <ol>
      <li><a href="#ManifestFeatures">Declarable required features</a></li>
      <li><a href="#ManifestPermissions">User permissions</a></li>
    </ol>
  </li>
</ol>

<h2>See also</h2>
<ol>
<li><a href="{@docRoot}sdk/api_diff/20/changes.html">API
Differences Report &raquo;</a> </li>
</ol>

</div>
</div>

<p>L is an upcoming release for the Android platform
that offers new features for users and app developers. This document provides
an introduction to the most notable new APIs.</p>

<p>L is currently available as a <strong>developer preview</strong> intended
for early adopters and testers. If you are interested in influencing the
direction of the Android framework,
<a href="{@docRoot}preview/setup-sdk.html">give the L Developer Preview a
try</a> and send us your feedback!</p>

<p class="caution"><strong>Caution:</strong>You should not publish apps
using L Developer Preview to the Google Play store.</p>

<h2 id="Behaviors">Important Behavior Changes</h2>

<p>If you have previously published an app for Android, be aware that your app
  might be affected by changes in L.</p>

<h3 id="BehaviorNotifications">If your app implements notifications...</h3>

<p>Notifications will be drawn with dark text atop white (or very light)
backgrounds to match the new material design widgets. Make sure that all your
notifications look right with the new color scheme. You should remove or update
assets and text styles that involve color. The system will automatically invert
action icons in notifications. Use
{@code android.app.Notification.Builder.setColor()} to set an accent color
in a circle behind your {@code Notification.icon} image.</p>

<p>The system will ignore all non-alpha channels in action icons and the main
notification icon, so you should assume that these icons will be alpha-only.
</p>

<p>If you are currently adding sounds and vibrations to your notifications by
using the {@link android.media.Ringtone}, {@link android.media.MediaPlayer},
or {@link android.os.Vibrator} classes, make sure to remove this code so that
the system can present notifications correctly in Do not disturb mode. You
should use the {@link android.app.Notification.Builder} methods instead to add
sounds and vibration.
</p>

<h3 id="BehaviorMediaControl">If your app uses RemoteControlClient...</h3>

<p>Lockscreens in L will not show transport controls for your
{@link android.media.RemoteControlClient}. Instead, your app can provide
media playback control from the lockscreen through a media notification. This
gives your app more control over the presentation of media buttons, while
providing a consistent experience for users across the lockscreen and
the unlocked device.</p>

<p>You must call {@code Notification.Builder.setVisibility(Notification.VISIBILITY_PUBLIC)} to mark your media notification as safe to reveal, even when the lockscreen is secured
with a PIN, pattern, or password.</p>

<h3 id="BehaviorFullscreen">If your app uses fullScreenIntent...</h3>

<p>Notifications now appear in a small floating window if all these conditions
are met: the user’s activity is in fullscreen mode, the screen is on, and the
device is unlocked. If your app implements fullscreen activities, make sure that
these heads-up notifications are presented correctly.</p>

<h3 id="BehaviorGetRecentTasks">If your app uses ActivityManager.getRecentTasks()...</h3>

<p>With the introduction of the new document tasks feature in L (see below),
the {@code android.app.ActivityManager.getRecentTasks()} method is now
deprecated to improve user privacy. For backwards
compatibility, it will still return a small subset of its data including the
calling application’s own tasks and possibly some other non-sensitive tasks
such as home. If your app is using this method to retrieve its own tasks,
use {@code android.app.ActivityManager.getAppTasks()} instead to retrieve that
information.</p>

<h2 id="UI">User Interface</h2>

<h3 id="MaterialDesign">Material design support</h3>

<p>L adds support for the material design style. You can create
material design apps that are visually dynamic and have UI element transitions
which feel natural and delightful to users. This support includes:</p>
<ul>
  <li>Material design theme
  <li>View shadows
  <li>{@code RecyclerView} widget
  <li>Drawable animation and styling effects
  <li>Material design animation and activity transitions effects
  <li>Ability to define animators to run on the view, with
{@code android.animation.StateListAnimator}.
  <li>Ability to change your status bar color to match the action bar and other
UI elements with {@code android.view.Window.setStatusBarColor()}.
</ul>
<p>To learn more about adding material design functionality to your app, see
<a href="{@docRoot}preview/quantum/index.html">Material design on Android</a>.</p>

<h3 id="LockscreenNotifications">Lockscreen notifications</h3>
<p>Lockscreens in L Developer Preview have the ability to present notifications.
User can choose via <em>Settings</em> whether to allow sensitive notification
content to be shown over a secure lockscreen.</p>

<p>Your app can control the level of detail visible when its notifications are
displayed over the secure lockscreen.To control the visibility level, call
{@code android.app.Notification.Builder.setVisibility()} and specify one of these
values:</p>
<ul>
<li>{@code VISIBILITY_PRIVATE}. Shows basic information, such as the
notification’s icon, but hides the notification’s full content. If you want to
provide a redacted public version of your notification for the system to display
on a secure lockscreen, set the public notification object in the publicVersion
field.
<li>{@code VISIBILITY_PUBLIC}. Shows the notification’s full content. This is
  the system default if visibility is left unspecified.
<li>{@code VISIBILITY_SECRET}. Shows only the most minimal information,
excluding even the notification’s icon.
</ul>

<h3 id="NotificationsMetadata">Notifications metadata</h3>
<p>The L Developer Preview uses metadata associated with your app notifications
to more intelligently sort your notifications. The metadata you set also
controls how the system presents your app notifications when the user is in Do
not disturb mode. When constructing your notification, you can call the
following methods in {@code android.app.Notification.Builder}:</p>

<ul>
<li>{@code setCategory()}. Allows the system to handle your app notifications
in Do not disturb mode (for example, if your notification represents an
incoming call, instant message, or alarm).
<li>{@code setPriority()}. Notifications with the priority field set to
{@code PRIORITY_MAX} or {@code PRIORITY_HIGH} will appear in a small floating
window if the notification also has sound or vibration.
<li>{@code addPerson()}. Allows you to add a list of people to a notification.
Your app can use this to signal to the system that it should group together
notifications from the specified people, or rank notifications from these
people as being more important.
</ul>

<h3 id="Recents">Concurrent documents and activities in Recents screen</h3>

<p>In previous releases, the
<a href="{@docRoot}design/get-started/ui-overview.html">Recents screen</a>
could only display a single task for each app that the user interacted with
most recently. The L Developer Preview allows your app to open additional tasks
for concurrent activities or documents. This feature facilitates multitasking
by letting users quickly switch between individual activities and documents
from the Recents screen. Examples of such concurrent tasks might include web
pages in a browser app, documents in a productivity app, concurrent matches in
a game, or chats in a messaging app. Your app can manage its tasks
through the {@code android.app.ActivityManager.AppTask} class.</p>

<p>To insert a logical break so that the system treats your activity as a new
document, use {@code android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT} when
launching the activity with {@link android.app.Activity#startActivity(android.content.Intent) startActivity()}. You can also get this behavior by declaring the
<a href="{@docRoot}guide/topics/manifest/activity-element.html">&lt;activity&gt;</a>
attribute {@code documentLaunchMode="intoExisting"} or {@code ="always"} in your
manifest.</p>

<p>You can also mark that a task should be removed from the Recents screen
when all its activities are closed by using {@code android.content.Intent.FLAG_ACTIVITY_AUTO_REMOVE_FROM_RECENTS} when starting the root activity for
the task. You can also set this behavior for an activity by declaring the
<a href="{@docRoot}guide/topics/manifest/activity-element.html">&lt;activity&gt;</a>
attribute {@code autoRemoveFromRecents=“true”} in your manifest.</p>

<p>To avoid cluttering the Recents screen, you can set the maximum number of
tasks from your app that can appear in the Recents screen through the
<a href="{@docRoot}guide/topics/manifest/application-element.html">&lt;application&gt;</a> attribute {@code android:maxRecent}. The current maximum that can be specified
is 100 tasks per user.</a></p>

<h3 id="WebView">WebView updates</h3>
<p>The L Developer Preview updates the {@link android.webkit.WebView}
implementation to Chromium M36, bringing security and stability enhancements,
as well as bug fixes. The default user-agent string for a
{@link android.webkit.WebView}  running on the L Developer Preview has
been updated to incorporate 36.0.0.0 as the version number.</p>

<p>Additionally, this release brings support for the
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">WebAudio</a>, <a href="https://www.khronos.org/webgl/">WebGL</a>, and
<a href="http://www.webrtc.org/">WebRTC</a> open standards. To learn more about
the new features included in this release, see <a href="https://developer.chrome.com/multidevice/webview/overview">WebView for Android</a>.</p>

<h2 id="UserInput">User Input</h2>

<h3 id="IME">IME bug fixes and improvements</h3>

<p>Beginning in the L Developer Preview, users can more easily switch between
all input method editors (IME) <a href="{@docRoot}guide/topics/text/creating-input-method.html">supported by the platform</a>. Performing the designated
switching action (usually touching a Globe icon on the soft keyboard) will cycle
among all such IMEs. This change takes place in
{@code android.view.inputmethod.InputMethodManager.shouldOfferSwitchingToNextInputMethod()}.</p>

<p>In addition, the framework will now check whether the next IME includes a
switching mechanism at all, thus supporting switching to the IME after it. An
IME with a switching mechanism will not cycle to an IME without one. This
change takes place in
{@code android.view.inputmethod.InputMethodManager.switchToNextInputMethod()}.

<p>To see an example of how to use the updated IME-switching APIs, refer to the
updated soft-keyboard implementation sample in this release.</p>

<h2 id="Animations">Animation &amp; Graphics</h2>

<h3 id="OpenGLES-3-1">Support for OpenGL ES 3.1</h3>
<p>The L Developer Preview adds Java interfaces and native support for OpenGL
ES 3.1. Key new functionality provided in OpenGL ES 3.1 includes:</p>

<ul>
<li>Compute shaders
<li>Separate shader objects
<li>Indirect draw commands
<li>Enhanced texturing functionality
<li>Shading language improvements
<li>Optional extensions for per-sample shading, advanced blending modes, and more
<li>Backward compatibility with OpenGL ES 2.0 and 3.0
</ul>

<p>The Java interface for OpenGL ES 3.1 on Android is provided with GLES31. When using OpenGL ES 3.1, be sure that you declare it in your manifest file with the
<a href="{@docRoot}guide/topics/manifest/uses-feature-element.html">{@code &lt;uses-feature&gt;}</a> tag and the {@code android:glEsVversion} attribute. For example:</p>

<pre>
&lt;manifest&gt;
    &lt;uses-feature android:glEsVersion="0x00030001" /&gt;
    ...
&lt;/manifest&gt;
</pre>

<p>For more information about using OpenGL ES, including how to check the device’s supported OpenGL ES version at runtime, see the <a href="{@docRoot}/guide/topics/graphics/opengl.html">OpenGL ES API guide</a>.</p>

<h2 id="Multimedia">Multimedia</h2>

<h3 id="Camera=v2">Camera v2 API</h3>

<p>The L Developer Preview introduces the new {@code android.hardware.camera2}
API to facilitate fine grain photo capture and image processing. You can now programmatically access the camera devices available to the system with {@code CameraManager.getCameraIdList()} and connect to a specific device with {@code CameraManager.openCamera()}. To start capturing images, you
need to create a {@code CameraCaptureSession} and specify the
{@link android.view.Surface} objects to send the captured images. The {@code CameraCaptureSession} can be configured to take single shots or multiple images
in a burst.</p>

<p>To be notified when new images are captured, implement the
{@code CameraCaptureSession.CaptureListener()} interface and set it in your
capture request. Now when the system completes the image capture request, your
{@code CameraCaptureSession.CaptureListener()} receives a call to
{@code onCaptureCompleted()}, providing you with the image capture metadata in a
{@code CaptureResult}.</p>

<h3 id="AudioPlayback">Audio playback</h3>
<p>This release includes the following changes for
  {@code android.media.AudioTrack}:</p>
<ul>
  <li>Your app can now supply audio data in floating-point format
({@code android.media.AudioFormat.ENCODING_PCM_FLOAT}). This permits greater
dynamic range, more consistent precision, and greater headroom. Floating-point arithmetic is especially useful during intermediate calculations. Playback
end-points use integer format for audio data, and with lower bit-depth. In L
Developer Preview, portions of the internal pipeline are not yet floating-point.
  <li>Your app can now supply audio data as a {@code ByteBuffer}, in the same
format as provided by {@code MediaCodec}.
  <li>The {@code WRITE_NON_BLOCKING} option can simplify buffering and
    multithreading for some apps.
</ul>

<h3 id="MediaPlaybackControl">Media playback control</h3>
<p>You can now build your own media controller app with the new
{@code android.media.session.MediaController} class, which provides
simplified transport controls APIs that replace those in
{@code android.media.RemoteControlClient}. The {@code MediaController} class
allows thread-safe control of playback from a non UI process, making it easier
to control your media playback service from your app’s user interface.

<p>You can also create multiple controllers to send playback commands,
media keys, and other events to the same ongoing
{@code android.media.session.MediaSession}. When you add a controller, you must
call {@code MediaSession.getSessionToken()} to request an access
token in order for your app to interact with the session.</p>

<p>Send transport commands such as "play", "stop", "skip", and
"set rating" by using {@code MediaController.TransportControls}. To handle
in-bound media transport commands from controllers attached to the session, you
should override the callback methods in
{@code MediaSession.TransportControlsCallback}.</p>

<p>You can also create rich notifications that allow playback control tied to a
media session with the new {@code android.app.Notification.MediaStyle} class.</p>

<h2 id="Storage">Storage</h2>

<h3 id="DirectorySelection">Directory selection</h3>

<p>The L Developer Preview extends the <a href="{@docRoot}guide/topics/providers/document-provider.html">Storage Access Framework</a> to let users
select an entire directory, rather than individual files, to give your app
read/write access to media files. When a directory is selected, your app also
has access to all its child directories and content.</p>

<p>To get the absolute paths to directories on external storage devices where
applications can store media files, call the
{@code android.content.Context.getExternalMediaDirs()} method. No additional
permissions are needed by your app to read or write to the returned paths.
External storage devices here are those considered by the system to be a
permanent part of the device, and includes emulated external storage and
physical media slots such as SD cards in battery compartments.</p>

<p>If you want to access a document in an existing directory, call the
{@code android.provider.DocumentsContract.buildDocumentViaUri()} method and pass
in a Uri representing the path to the parent directory and the target document
ID. The method returns a new {@link android.net.Uri} with which your app can
use to write media content with {@code DocumentsContract.createDocument()}.

<h2 id="Wireless">Wireless &amp; Connectivity</h2>

<h3 id="Multinetwork">Dynamic network selection and seamless handoff</h3>
<p>The L Developer Preview provides new multi-networking APIs for your app to
dynamically scan for available networks with specific capabilities, and
establish a connection to them. This is useful when your app requires a
specialized network, such as an SUPL, MMS, or carrier-billing network, or if
you want to send data using a particular type of transport protocol.</p>

<p>To select and connect to a network dynamically from your app, first
instantiate a {@code android.net.ConnectivityManager}. Next, create a
{@code android.net.NetworkRequest} to specify the network features and transport
type your app is interested in. To start scanning for suitable networks, call
{@code ConnectivityManager.requestNetwork()} or
{@code ConnectivityManager.registerNetworkCallback(), and pass in the
{@code NetworkRequest} object and an implementation of
{@code ConnectivityManager.NetworkCallbackListener}.</p>

<p>When the system detects a suitable network, it connects to the network and
invokes the {@code NetworkCallbackListener.onAvailable()} callback. You can use
the {@code android.net.Network} object from the callback to get additional
information about the network, or to establish a socket connection.</p>

<h3 id="BluetoothBroadcasting">Bluetooth broadcasting</h3>
<p>Android 4.3 introduced platform support for <a href="{@docRoot}guide/topics/connectivity/bluetooth-le.html">Bluetooth Low Energy</a>
(BLE) in the central role. In the L Developer Preview, an Android device can now
act as a Bluetooth LE <em>peripheral device</em> and make its presence known to
nearby devices. For instance, you can build apps that allow a device to
function as a pedometer or health monitor and communicate its data with another
BLE device.</p>

<p>The new {@code android.bluetooth.le} APIs enable your apps to broadcast advertisements, scan for responses, and form connections with nearby BLE devices.
You must add the {@code android.permission.BLUETOOTH_ADMIN} permission in your
manifest in order for your app to use the new advertising and scanning features.</a>

<p>To begin Bluetooth LE advertising so that other devices can discover the
device running your app, call {@code android.bluetooth.le.BluetoothAdvertiser.startAdvisertising()} and pass in an implementation of the
{@code android.bluetooth.le.AdvertiseCallback} class to report the success
or failure of the advertising operation.</p>

<p>Conversely, if you want to scan for Bluetooth LE devices nearby, call
{@code android.bluetooth.le.BluetoothLeScanner.startScan()} and pass in an
implementation of {@code android.bluetooth.le.ScanCallback} to report if a
Bluetooth LE advertisement is found. Optionally, you can pass in filters to scan
for a specific type of device.</p>

<h3 id="NFCEnhancements">NFC enhancements</h3>
<p>The L Developer Preview adds these enhancements to enable wider and more
flexible use of NFC:</p>

<ul>
<li>Android Beam is now available in the share menu.
<li>Your app can invoke the Android Beam on the user’s device to share data by
calling {@code android.nfc.NfcAdapter.invokeBeam()}. This avoids the need for
the user to manually tap the device against another NFC-capable device to
complete the data transfer.
<li>Use the new {@code android.nfc.NdefRecord.createTextRecord()} method if
  you want to create an NDEF record containing UTF-8 text data.
<li>If you are developing a payment app, you now have the ability to
register an NFC application ID (AID) dynamically by calling
{@code android.nfc.cardemulation.CardEmulation.registerAidsForService()}.
You can also use {@code android.nfc.cardemulation.CardEmulation.setPreferredService()}
to set the preferred card emulation service that should be used when a specific
activity is in the foreground.
</ul>

<h2 id="Power">Power Efficiency</h2>

<h3 id="JobScheduler">Scheduling jobs</h3>
<p>The L Developer Preview provides a new {@code android.app.job.JobScheduler}
API that lets you define jobs for the system to run asynchronously at a later
time that optimizes battery life, such as when the device is charging. This is
useful when you want to defer non user-facing units of work, have application
code that accesses the network, or want to run a number of tasks as a batch on
a regular schedule.</p>

<p>A {@code android.app.job.JobInfo} object encapsulates such a unit of work,
and provides an exact description of the criteria you are scheduling.</p>

<p>Use the {@code android.app.job.JobInfo.Builder} to configure how the
scheduled task should run. You can schedule the task to run under specific
conditions such as only while the device is charging, when connected to an
unmetered network, or when the system deems the device is idle.</p>

<p>For example, you can add code like this to run your task on an
unmetered network:</p>

<pre>
JobInfo uploadTask = new JobInfo.Builder(mJobId, mServiceComponent)
        .setRequiredNetworkCapabilities(JobInfo.NetworkType.UNMETERED)
        .build();

JobScheduler jobScheduler =
        (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE)
jobScheduler.schedule(uploadTask);
</pre>

<h3 id="PowerMeasurementTools">Developer tools and APIs for power measurement</h3>
<p>The L Developer Preview provides several new developer tools and APIs to help
you better measure and understand your app's power usage.</p>

<dl>
<dt><strong>batterystats</strong></dt>
<dd>
<p>The {@code dumpsys batterystats} command allows you to generate interesting
statistical data about battery usage on a device, organized by unique user ID
(UID). The statistics generated by the tool include:</p>

<ul>
<li>History of battery related events
<li>Global statistics for the device
<li>Approximated power use per UID and system component
<li>Per-app mobile ms per packet
<li>System UID aggregated statistics
<li>App UID aggregated statistics
</ul>

<p>Use the {@code --help} option to learn about the various options that you
can apply for tailoring the output. For example, to run the tool to print
battery usage statistics since the device was last charged for a given app
package, run this command:
<pre>
$ adb shell dumpsys batterystats --charged <package-name>
</pre>
</dd>

<dt><strong>Battery Historian</strong></dt>
<dd>
<p>The Battery Historian tool ({@code historian.par}) analyzes L-based Android
bug reports and creates an HTML visualization of power-related events. It can
also visualize power consumption data from a power monitor, and will attempt to
map power usage to the wakelocks seen. You can find the Battery Historian tool
in {@code &lt;sdk&gt;/tools}.</p>

<p>For best results, you should first enable full wakelock reporting to allow
the Battery Historian tool to monitor uninterrupted over an extended period of
time:</p>
<pre>
$ adb shell dumpsys batterystats --enable full-wake-history
</pre>

<p>You should also reset battery statistics at the beginning of a
measurement:</p>
<pre>
$ adb shell dumpsys batterystats --reset
</pre>

<p>To generate an HTML visualization:</p>
<pre>
$ historian.par [-p powerfile] bugreport.txt > out.html
</pre>
</dd>

<dt><strong>On-device power management</strong></dt>
<dd>
<p>You can use the {@code android.os.BatteryManager} API to obtain power
consumption information based on the battery fuel gauge included in Android
phones and tablets. This is useful in cases when it is not convenient to
connect external measurement equipment to the Android device.</p>
<p>To retrieve the battery properties, call {@code BatteryManager.getIntProperty()}
or {@code BatteryManager.getLongProperty()}. The properties available, the
exact resolution of the values of each, and other characteristics such as
update frequency depend on the particular device being tested.</p>

<p>The following properties can be inspected on all Android devices:</p>

<table>
  <tr>
     <th>Property</th>
     <th>Description</th>
  </tr>
  <tr>
     <td>{@code BatteryManager.BATTERY_PROPERTY_CHARGE_COUNTER}</td>
     <td>Remaining battery capacity in microampere-hours.</td>
  </tr>
  <tr>
     <td>{@code BatteryManager.BATTERY_PROPERTY_CURRENT_NOW}</td>
     <td>Instantaneous battery current in microamperes.</td>
  </tr>
  <tr>
     <td>{@code BatteryManager.BATTERY_PROPERTY_CURRENT_AVERAGE}</td>
     <td>Average battery current in microamperes</td>
  </tr>
  <tr>
     <td>{@code BatteryManager.BATTERY_PROPERTY_CAPACITY}</td>
     <td>Remaining battery capacity as an integer percentage.</td>
  </tr>
  <tr>
     <td>{@code BatteryManager.BATTERY_PROPERTY_ENERGY_COUNTER}</td>
     <td>Remaining energy in nanowatt-hours.</td>
  </tr>
</table>
<dd>
</dl>

<h2 id="Enterprise">Enterprise</h2>
<h3 id="ManagedProvisioning">Managed provisioning</h3>

<p>The L Developer Preview provides new functionality for running apps within
an enterprise environment:</p>
<ul>
<li><strong>Create managed user profiles</strong>. A device administrator can
initiate a managed provisioning process to enroll a user device with an
existing personal account into a co-present but separate managed profile that
the administrator controls.
<li><strong>Set device owner scope</strong>. Device administrators can also
apply managed provisioning to configure a device that has no previous user
accounts installed, so that they have full control over the device.
</ul>

<p>To start the manged provisioning process, send
{@code ACTION_PROVISION_MANAGED_PROFILE} in an {@link android.content.Intent}. A
user may be associated with more than one managed profile. To get a list of the
managed profiles associated with the user, call
{@code android.os.UserManager.getUserProfiles()}.</p>

<p>Once a managed profile is created for a user, apps that are managed by the
device administrator will appear alongside non-managed apps in the user’s
Launcher, Recent apps screen, and notifications. A device policy management app
can make the managed apps visually prominent by appending a “work” badge to the
icon drawable with {@code android.os.UserManager.getBadgeDrawableForUser()}.</p>

<p>If you are developing a Launcher app, you can use the new {@code android.content.pm.LauncherApps} class to get a list of launchable activities for the current user
and any associated managed profiles.</p>

<h2 id="Printing">Printing Framework</h2>

<h3 id="PDFRender">Render PDF as bitmap</h3>
<p>You can now render PDF document pages into bitmap images for printing by
using the new {@code android.graphics.pdf.PdfRenderer} class. You must specify a
{@code ParcelFileDescriptor} that is seekable (that is, the file can be randomly
accessed) on which the system writes the the printable content. Your app can
obtain a page for rendering with {@code openPage()}, then call {@code render()}
to turn the opened {@code PdfRenderer.Page} into a bitmap. You can also set
additional parameters if you only wan to convert a portion of the document into
a bitmap image (for example, to implement <a href="http://en.wikipedia.org/wiki/Tiled_rendering">tile rendering</a> in order to zoom in on the document).</p>

<h2 id="TestingA11y">Testing &amp; Accessibility </h2>

<h3 id="Testing A11yImprovements">Testing and accessibility improvements</h3>
<p>The L Developer Preview adds the following support for testing and
accessibility:</p>

<ul>
<li>You can use the new {@code android.app.UiAutomation.getWindowAnimationFrameStats()}
and {@code android.app.UiAutomation.getWindowContentFrameStats()} methods to
capture frame statistics for window animations and content. This lets you
write instrumentation tests to evaluate if the app under test is rendering
frames at a sufficient refresh frequency to provide a smooth user experience.
<li>You can execute shell commands from your instrumentation test with the new
{@code android.app.UiAutomation.executeShellCommand()}. The command execution
is similar to running 'adb shell' from a host connected to the device. This
allows you to use shell based tools such as {@code dumpsys}, {@code am},
{@code content}, and {@code pm}.
<li>Accessibility services and test tools that use the accessibility APIs
(such as <a href="{@docRoot}tools/help/uiautomator/index.html">UiAutomator</a>)
can now retrieve detailed information about the properties of windows on the
screen that sighted users can interact with. To retrieve a list of
{@code android.view.accessibility.AccessibilityWindowInfo} representing the
windows information, call the new
{@code android.accessibilityservice.AccessibilityService.getWindows()} method.
<li>You can use the new {@code android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction} to define standard or customized
actions to perform on an {@code android.view.accessibility.AccessibilityNodeInfo}.
The new {@code AccessibilityAction} class replaces the actions-related APIs
previously found in {@code AccessibilityNodeInfo}.
</ul>

<h2 id="manifest">Manifest Declarations</h2>

<h3 id="ManifestFeatures">Declarable required features</h3>
<p>The following values are now supported in the <a href="{@docRoot}guide/topics/manifest/uses-feature-element.html">{@code &lt;uses-feature&gt;}</a> element so you
can ensure that your app is installed only on devices that provide the features
your app needs.</p>

<ul>
<li>{@code FEATURE_LEANBACK}. Declares that your app must be installed only on devices that support the <a href="{@docRoot}tv}">Android TV</a> user interface. Example:
<pre>
&lt;uses-feature android:name="android.software.leanback"
              android:required="true" /&gt;
</pre>

<li>{@code FEATURE_MANAGEDPROFILES}. Declares that your app must only be installed on devices that support managed profiles for enterprise users. Example:
<pre>
&lt;uses-feature android:name="android.software.managedprofiles"
              android:required="true" /&gt;
</pre>
<li>{@code FEATURE_WEBVIEW}. Declares that your app must only be installed on devices that fully implement the android.webkit.* APIs. Example:
<pre>
&lt;uses-feature android:name="android.software.webview"
              android:required="true" /&gt;
</pre>
</ul>

<h3 id="ManifestPermissions">User permissions</h3>
<p>The following values are now supported in the <a href="{@docRoot}guide/topics/manifest/uses-permission-element.html">{@code &lt;uses-permission&gt;}</a> to declare the
permissions your app requires in order to access certain APIs.

<ul>
<li>{@code SIM_COMMUNICATION}. Required to communicate with a SIM card using
  logical channels.
</ul>
